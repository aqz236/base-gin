// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"base-gin/configs"
	service2 "base-gin/internal/app/user/service"
	"base-gin/internal/domain/user/service"
	"base-gin/internal/infrastructure/cache"
	"base-gin/internal/infrastructure/database"
	"base-gin/internal/infrastructure/logging"
	"base-gin/internal/infrastructure/repository/user_impl"
	"base-gin/internal/interfaces/handler/user"
	"base-gin/internal/interfaces/router"
	"base-gin/internal/interfaces/validation"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

// InitializeApp 初始化应用
func InitializeApp() (*App, func(), error) {
	config := configs.LoadConfig()
	db := database.NewDB(config)
	userRepo := user_impl.NewUserRepository(db)
	userDomainService := service.NewUserDomainService(userRepo)
	userService := service2.NewUserService(userRepo, userDomainService)
	validator := validation.NewValidator()
	userHandler := user.NewUserHandler(userService, validator)
	engine := router.NewRouter(userHandler)
	redisClient := cache.NewRedisClient(config)
	logger := logging.NewLogger(config)
	app := NewApp(engine, db, redisClient, logger)
	return app, func() {
	}, nil
}

// wire.go:

// App 应用结构
type App struct {
	Router *gin.Engine
	DB     *database.DB
	Cache  *cache.RedisClient
	Logger *logging.Logger
}

// NewApp 创建应用实例
func NewApp(router2 *gin.Engine,
	db *database.DB, cache2 *cache.RedisClient,
	logger *logging.Logger,
) *App {
	return &App{
		Router: router2,
		DB:     db,
		Cache:  cache2,
		Logger: logger,
	}
}
