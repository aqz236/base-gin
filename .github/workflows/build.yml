name: 多平台构建

# 触发条件：dev 分支推送时触发
on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  # 代码质量检查
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: 缓存 Go 模块
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: 安装依赖
      run: |
        go mod download
        go mod tidy
        
    - name: 安装 Wire 工具
      run: go install github.com/google/wire/cmd/wire@latest
      
    - name: 生成 Wire 代码
      run: cd wire && wire
      
    - name: 代码格式检查
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "代码格式不符合规范，请运行 gofmt -s -w ."
          gofmt -s -l .
          exit 1
        fi
        
    - name: 代码静态分析
      run: go vet ./...
      
    - name: 运行测试
      run: |
        chmod +x scripts/run-tests.sh
        ./scripts/run-tests.sh

  # 多平台构建
  build:
    needs: lint
    strategy:
      fail-fast: false # 允许某个平台失败时，其他平台继续构建
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            name: linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            name: linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            name: darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            name: darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            name: windows-amd64
            ext: .exe
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: 缓存 Go 模块
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: 安装系统依赖 (Linux)
      if: matrix.goos == 'linux'
      run: |
        sudo apt-get update
        if [ "${{ matrix.goarch }}" = "amd64" ]; then
          sudo apt-get install -y gcc libc6-dev
        elif [ "${{ matrix.goarch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
        fi
          
    - name: 安装依赖
      run: |
        go mod download
        go mod tidy
        
    - name: 安装 Wire 工具
      run: go install github.com/google/wire/cmd/wire@latest
      
    - name: 生成 Wire 代码
      run: cd wire && wire
      
    - name: 创建构建目录
      shell: bash
      run: mkdir -p dist
      
    - name: 构建应用
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: ${{ matrix.goos == 'linux' && '1' || '0' }}
        CC: ${{ matrix.goos == 'linux' && matrix.goarch == 'arm64' && 'aarch64-linux-gnu-gcc' || '' }}
      shell: bash
      run: |
        go build -ldflags="-s -w -X main.version=${{ github.sha }}" \
          -o dist/base-gin-${{ matrix.name }}${{ matrix.ext }} \
          cmd/main.go
          
    - name: 创建版本信息文件
      shell: bash
      run: |
        echo "构建信息:" > dist/build-info-${{ matrix.name }}.txt
        echo "版本: ${{ github.sha }}" >> dist/build-info-${{ matrix.name }}.txt
        echo "分支: ${{ github.ref_name }}" >> dist/build-info-${{ matrix.name }}.txt
        echo "构建时间: $(date)" >> dist/build-info-${{ matrix.name }}.txt
        echo "平台: ${{ matrix.goos }}/${{ matrix.goarch }}" >> dist/build-info-${{ matrix.name }}.txt
        echo "Go 版本: $(go version)" >> dist/build-info-${{ matrix.name }}.txt
        
    - name: 验证构建结果
      shell: bash
      run: |
        ls -la dist/
        if [ "${{ matrix.goos }}" = "windows" ]; then
          file dist/base-gin-${{ matrix.name }}.exe || true
        else
          file dist/base-gin-${{ matrix.name }} || true
        fi
        
    # 上传构建产物
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: base-gin-${{ matrix.name }}
        path: |
          dist/base-gin-${{ matrix.name }}${{ matrix.ext }}
          dist/build-info-${{ matrix.name }}.txt
        retention-days: 30

  # 创建发布包（可选）
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    
    steps:
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: 整理发布文件
      run: |
        mkdir -p release
        find artifacts -name "base-gin-*" -type f | while read file; do
          cp "$file" release/
        done
        ls -la release/
        
    - name: 计算文件哈希
      run: |
        cd release
        sha256sum * > checksums.txt
        cat checksums.txt
        
    - name: 上传发布包
      uses: actions/upload-artifact@v4
      with:
        name: base-gin-release-${{ github.sha }}
        path: release/
        retention-days: 90

  # 构建统计
  summary:
    needs: [lint, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 构建结果汇总
      run: |
        echo "## 构建结果汇总" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **提交哈希**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **分支**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **触发事件**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **构建时间**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.lint.result }}" = "success" ]; then
          echo "✅ 代码质量检查通过" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ 代码质量检查失败" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ 多平台构建成功" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 构建平台:" >> $GITHUB_STEP_SUMMARY
          echo "- Linux AMD64" >> $GITHUB_STEP_SUMMARY
          echo "- Linux ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- macOS AMD64" >> $GITHUB_STEP_SUMMARY
          echo "- macOS ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- Windows AMD64" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ 多平台构建失败" >> $GITHUB_STEP_SUMMARY
        fi
