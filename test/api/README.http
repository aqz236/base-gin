# Base-Gin API 测试套件
# 
# 这是主要的测试入口文件，包含了完整的API测试流程
# 
# 测试目录结构:
# ├── common/          # 通用测试（健康检查等）
# ├── user/            # 用户相关测试
# │   ├── crud.http        # 基础CRUD操作
# │   ├── validation.http  # 验证和错误处理
# │   ├── boundary.http    # 边界测试
# │   └── performance.http # 性能测试
# └── env/             # 环境配置
#     ├── development.http # 开发环境
#     └── production.http  # 生产环境

@hostname = localhost
@port = 8080
@baseUrl = http://{{hostname}}:{{port}}
@apiBase = {{baseUrl}}/api/v1
@jsonContentType = application/json

# 测试流程说明：
# 1. 首先运行健康检查确保服务正常
# 2. 然后运行用户CRUD测试验证基本功能
# 3. 运行验证测试确保错误处理正确
# 4. 运行边界测试验证特殊情况
# 5. 最后运行性能测试验证系统表现

### 快速健康检查
GET {{baseUrl}}/health
Accept: {{jsonContentType}}

> {%
  client.test("服务状态检查", function() {
    client.assert(response.status === 200, "服务应该正常运行");
    console.log("✅ 服务健康检查通过");
  });
%}

###

### 快速API可用性检查
GET {{apiBase}}/users
Accept: {{jsonContentType}}

> {%
  client.test("API可用性检查", function() {
    client.assert(response.status === 200, "用户API应该可用");
    console.log("✅ API可用性检查通过");
    console.log("📊 当前用户数量: " + (response.body.data ? response.body.data.length : 0));
  });
%}

###

# 🚀 测试套件使用说明:
#
# 1. 开发环境快速测试:
#    - 运行本文件的健康检查部分
#    - 然后运行 user/crud.http 进行基础功能测试
#
# 2. 完整回归测试:
#    - common/health.http      (基础健康检查)
#    - user/crud.http          (用户CRUD操作)
#    - user/validation.http    (验证和错误处理)
#    - user/boundary.http      (边界和特殊场景)
#    - user/performance.http   (性能和并发测试)
#
# 3. 环境切换:
#    - 修改上方的 @hostname 和 @port 变量
#    - 或者使用 env/ 目录下的环境配置文件
#
# 4. 测试数据清理:
#    - 性能测试会自动清理创建的测试数据
#    - 手动清理可以通过删除接口删除指定用户

### 测试环境信息显示
GET {{baseUrl}}/health
Accept: {{jsonContentType}}

> {%
  client.test("环境信息", function() {
    console.log("🔧 测试环境配置:");
    console.log("   服务地址: " + "{{baseUrl}}");
    console.log("   API前缀: " + "{{apiBase}}");
    console.log("   测试时间: " + new Date().toLocaleString());
  });
%}

### 测试脚本运行确认
# 确认脚本是否正常运行

GET https://httpbin.org/get

> {%
  console.log("TEST: Script is running");
%}